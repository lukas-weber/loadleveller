import tempfile
import os

batchscript_claix18 = '''
#!/usr/bin/env zsh

# Autogenerated by load-leveller targeting the claix18 cluster. Do not edit.

#SBATCH --job-name={jobname}
#SBATCH --time={walltime}
#SBATCH --mem-per-cpu={mem_per_cpu}
##SBATCH -P {project} #TODO figure out how projects work
#SBATCH --ntasks={num_cores}
#SBATCH --export=NONE
#SBATCH --output=output.%x
#SBATCH --error=error.%x

{custom_cmds}

$MPIEXEC $FLAGS_MPI_BATCH {cmd}
'''

batchscript_templates = {
    'claix18': batchscript_claix18
}

batch_commands = {
    'claix18': 'sbatch {batchscript}'
}

def generate_batchscript(template, cmd, jobname, jobconfig):
    return template.format(
        jobname=jobname,
        mem_per_cpu=jobconfig['mem_per_cpu'],
        walltime=jobconfig['walltime'],
        project=jobconfig['project'],
        num_cores=jobconfig['num_cores'],
        custom_cmds=jobconfig['custom_cmds'],
        mc_cmd=' '.join(cmd)
    )
        
def run(jobname, jobconfig, cmd):
    sysinfo = os.environ.get('MCLL_SYSTEM_INFO')
    if not sysinfo:
        print('Warning: environment variable $MCLL_SYSTEM_INFO not set. Will assume value \'local\'.')
        sysinfo = 'local'
    if sysinfo != 'local' and sysinfo not in batch_commands.keys():
        print('Warning: $MCLL_SYSTEM_INFO set to \'{}\' which is not supported. Will assume value \'local\'.'.format(sysinfo))
        sysinfo = 'local'

    if sysinfo == 'local':
        mpicmd = '{} -n {} {}'.format(jobconfig['mpirun'], jobconfig['num_cores'], ' '.join(cmd))
        print('$ '+mpicmd)
        os.system(mpicmd)
    else:
        with tempfile.NamedTemporaryFile(mode='w',delete=False) as f:
            f.write(generate_batchscript(batchscript_templates[sysinfo], cmd, jobname, jobconfig))
            bscriptname = f.name()
        mpicmd = batch_commands[sysinfo].format(batchscript=bscriptname)
        print('$ '+mpicmd)
        os.system()
