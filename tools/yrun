#!/usr/bin/env python3

import yaml
import argparse
import subprocess
from loadleveller import clusterutils
import sys
import os

parser = argparse.ArgumentParser(description='This helper program runs a load-leveller Monte Carlo program using a provided YAML-formatted jobfile. The jobfile contains information on how to run the job (what mc binary, mpi-parameters, ...) and a number of tasks with different simulation parameters each. When running on a cluster batch system, the batch script is generated using ygeneratebatchscript.')

parser.add_argument('jobfile', metavar='JOBFILE', help='Configuration file containing all the job information. May be generated using ytaskmaker')
parser.add_argument('--single', action='store_true', help='Run in the single core scheduler mode')
parser.add_argument('--merge', action='store_true', help='Merge the measurement data of all tasks')

args = parser.parse_args()

if args.single and args.merge:
    print('Error: cannot merge and run in single mode at the same time.')
    sys.exit(1)

with open(args.jobfile, 'r') as f:
    jobfile = yaml.load(f)

jobconfig_path = os.path.expandvars(os.path.expanduser(jobfile['jobconfig']))
with open(jobconfig_path) as f:
    jobconfig = yaml.load(f)

mcbinary = os.path.expandvars(os.path.expanduser(jobconfig['mc_binary']))

if args.single:
    cmd = [mcbinary, 'single', args.jobfile]
    print('$ '+' '.join(cmd))
    subprocess.run(cmd)
elif args.merge:
    subprocess.run([mcbinary, 'merge', args.jobfile])
else:
    clusterutils.run(args.jobfile, jobconfig, [mcbinary, args.jobfile]) 
