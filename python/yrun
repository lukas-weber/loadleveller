#!/usr/bin/env python3

import yaml
import argparse
import subprocess
from loadleveller import clusterutils, jobfile
import glob
import sys
import os

parser = argparse.ArgumentParser(description='This helper program runs a loadleveller Monte Carlo program using a provided YAML-formatted jobfile. The jobfile contains information on how to run the job (what mc binary, mpi-parameters, ...) and a number of tasks with different simulation parameters each. When running on a cluster batch system, the batch script is generated using ygeneratebatchscript.')

parser.add_argument('jobfile', metavar='JOBFILE', help='Configuration file containing all the job information. May be generated using ytaskmaker')
parser.add_argument('-s','--single', action='store_true', help='Run in the single core scheduler mode')
parser.add_argument('-m','--merge', action='store_true', help='Merge the measurement data of all tasks')
parser.add_argument('--force', action='store_true', help='Ignore warnings about possible job corruption')

args = parser.parse_args()

jobdir = os.path.dirname(args.jobfile)
jobfile_name = os.path.basename(args.jobfile)

if jobdir != '':
    os.chdir(jobdir)

if args.single and args.merge:
    print('Error: cannot merge and run in single mode at the same time.')
    sys.exit(1)

job = jobfile.JobFile(jobfile_name)

# check age of the different files
binary_modtime = os.stat(job.mc_binary).st_mtime
jobfile_modtime = os.stat(jobfile_name).st_mtime

try:
    f = next(glob.iglob('{}.data/*/*.h5'.format(jobfile_name))) # only check one of the output files for speed
    data_modtime = os.stat(f).st_mtime

    error = False
    label = 'Warning' if args.force else 'Error'
    if binary_modtime > data_modtime:
        print('{}: binary \'{}\' is newer than the checkpoint files.'.format(label, job.mc_binary))
        error = True
    if jobfile_modtime > data_modtime:
        print('{}: jobfile \'{}\' is newer than the checkpoint files.'.format(label, jobfile_name))
        error = True
    if not args.force and error:
        print('Use ydelete to start from a blank run or use \'--force\' to proceed if you are sure\nthe changes you made are compatible.')
        sys.exit(1)
except StopIteration:
    pass

if args.single:
    cmd = [job.mc_binary, 'single', jobfile_name]
    print('$ '+' '.join(cmd))
    subprocess.run(cmd)
elif args.merge:
    subprocess.run([job.mc_binary, 'merge', jobfile_name])
else:
    clusterutils.run(jobfile_name, job.jobconfig, [job.mc_binary, jobfile_name]) 
