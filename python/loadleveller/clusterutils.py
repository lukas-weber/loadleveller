import tempfile
import os
import sys

batchscript_claix18 = '''
#!/usr/bin/env zsh

# Autogenerated by loadleveller targeting the claix18 cluster. Do not edit.

#SBATCH --job-name={jobname}
#SBATCH --time={walltime}
#SBATCH --mem-per-cpu={mem_per_cpu}
##SBATCH -P {project} #TODO figure out how projects work
#SBATCH --ntasks={num_cores}
#SBATCH --export=NONE
#SBATCH --output=output.%x
#SBATCH --error=error.%x

{custom_cmds}

{mpirun} $FLAGS_MPI_BATCH {cmd}
'''

batchscript_templates = {
    'claix18': batchscript_claix18
}

batch_commands = {
    'claix18': 'sbatch {batchscript}'
}

valid_systems = ['local', 'claix18']

def generate_batchscript(template, cmd, jobname, jobconfig):
    try:
        return template.format(
            jobname=jobname,
            mpirun=jobconfig.get('mpirun','mpirun'),
            mem_per_cpu=jobconfig.get('mem_per_cpu','2G'),
            walltime=jobconfig['mc_walltime'],
            project=jobconfig.get('project',''),
            num_cores=jobconfig['num_cores'],
            custom_cmds=jobconfig.get('custom_cmds',''),
            mc_cmd=' '.join(cmd)
        )
    except KeyError as e:
        print('Error: required key "{}" missing in jobconfig'.format(e.args[0]))
        sys.exit(1)
        

def determine_system():
    sysinfo = os.environ.get('MCLL_SYSTEM_INFO')

    if sysinfo == "":
        import socket
        hostname = socket.gethostname()
        if hostname.endswith('.hpc.itc.rwth-aachen.de'):
            sysinfo = 'claix18'

    if not sysinfo in valid_systems:
        sysinfo = 'local'

    return sysinfo
    
def run(jobname, jobconfig, cmd):
    sysinfo = determine_system()

    print('running on system \'{}\''.format(sysinfo))

    if sysinfo == 'local':
        mpicmd = '{} -n {} {}'.format(jobconfig['mpirun'], jobconfig['num_cores'], ' '.join(cmd))
        print('$ '+mpicmd)
        os.system(mpicmd)
    else:
        with tempfile.NamedTemporaryFile(mode='w',delete=False) as f:
            f.write(generate_batchscript(batchscript_templates[sysinfo], cmd, jobname, jobconfig))
            bscriptname = f.name()
        mpicmd = batch_commands[sysinfo].format(batchscript=bscriptname)
        print('$ '+mpicmd)
        os.system()
